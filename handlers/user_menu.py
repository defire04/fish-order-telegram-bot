import random

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from data.config import ADMIN_IDS
from handlers.admin_menu import show_admin_menu
from handlers.cart import confirm_order, show_cart
from keyboards.inline import make_main_menu, make_products_list, make_brand_menu
from keyboards.reply import main_reply_keyboard
from services.order_service import get_user_orders, get_items_for_order
from services.product_service import get_all_brands, list_products_by_brand
from services.user_service import ensure_user_exists

user_router = Router()

greetings = [
    "–ü—Ä–∏–≤—ñ—Ç, {}! –†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏!",
    "–í—ñ—Ç–∞—é, {}! –°–ø–æ–¥—ñ–≤–∞—é—Å—è, —É —Ç–µ–±–µ –≤—Å–µ –¥–æ–±—Ä–µ!",
]

FRIENDLY_EMOJI = "üëã"


@user_router.message(Command("start"))
async def cmd_start(message: Message):
    user_fullname = (message.from_user.first_name or '') + ' ' + (message.from_user.last_name or '')
    user_fullname = user_fullname.strip()
    ensure_user_exists(message.from_user.id, user_fullname)

    await message.answer(FRIENDLY_EMOJI)

    greet = random.choice(greetings).format(user_fullname)
    text = greet + "\n–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞—à—ñ –∫–≤–∞–¥—Ä–æ—Ü–∏–∫–ª–∏, –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –∫–æ—à–∏–∫–∞ —Ç–∞ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."

    await message.answer(
        text,
        reply_markup=main_reply_keyboard(message.from_user.id)
    )


@user_router.message(F.text.in_(["–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", "–ö–∞—Ç–∞–ª–æ–≥", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫", "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "–ê–¥–º—ñ–Ω-–º–µ–Ω—é"]))
async def on_reply_menu(message: Message):
    if message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
        await message.answer(
            "–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:",
            reply_markup=make_main_menu()
        )

    elif message.text == "–ö–∞—Ç–∞–ª–æ–≥":
        brands = get_all_brands()
        if not brands:
            await message.answer(
                "–ó–∞—Ä–∞–∑ —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü–æ–≤–µ—Ä–Ω–∏—Å—å –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–∞–ø–∏—Ç–∞–π —â–æ—Å—å —ñ—â–µ!",
                reply_markup=main_reply_keyboard(message.from_user.id)
            )
            return
        await message.answer(
            "–û—Å—å –Ω–∞—à—ñ –±—Ä–µ–Ω–¥–∏. –û–±–∏—Ä–∞–π, –±—É–¥—å –ª–∞—Å–∫–∞:",
            reply_markup=make_brand_menu(brands)
        )

    elif message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫":
        await show_cart(message)

    elif message.text == "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        orders = get_user_orders(message.from_user.id)

        if not orders:
            await message.answer(
                "–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å. –ú–æ–∂–µ, –∑–∞–∑–∏—Ä–Ω–µ–º–æ –≤ –∫–∞—Ç–∞–ª–æ–≥?",
                reply_markup=main_reply_keyboard(message.from_user.id)
            )
        else:
            txt = "–û—Å—å —Ç–≤–æ—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            for o in orders:
                txt += f"‚Ññ{o['id']} | —Å—É–º–∞ {o['total_price']} –≥—Ä–Ω | {o['created_at']}\n"
                items = get_items_for_order(o["id"])
                if items:
                    txt += "–¢–æ–≤–∞—Ä–∏:\n"
                    for it in items:
                        subtotal = it["product_price"] * it["quantity"]
                        txt += f"  {it['product_name']} x {it['quantity']} = {subtotal} –≥—Ä–Ω\n"
                txt += "--------------------------------\n"
            txt += "\n–Ø–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏ –Ω–∞–º!"

            await message.answer(
                txt,
                reply_markup=main_reply_keyboard(message.from_user.id)
            )

    elif message.text == "–ê–¥–º—ñ–Ω-–º–µ–Ω—é":
        if message.from_user.id in ADMIN_IDS:
            await show_admin_menu(message)
        else:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")


@user_router.callback_query(F.data.in_(["menu_cart", "menu_order", "go_main"]))
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except:
        pass

    if callback.data == "menu_cart":
        await show_cart(callback.message, callback.from_user.id)

    elif callback.data == "menu_order":
        await confirm_order(callback, state)

    elif callback.data == "go_main":
        await callback.message.answer(
            "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
            reply_markup=make_main_menu()
        )

    await callback.answer()


@user_router.callback_query(F.data.startswith("brand:"))
async def on_choose_brand(callback: CallbackQuery):
    brand = callback.data.split(":", 1)[1]
    products = list_products_by_brand(brand)

    try:
        await callback.message.delete()
    except:
        pass

    if not products:
        await callback.message.answer(
            f"–ü–æ–∫–∏ —â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –±—Ä–µ–Ω–¥—É {brand} –Ω–µ–º–∞—î.",
            reply_markup=main_reply_keyboard(callback.from_user.id)
        )
        await callback.answer()
        return

    kb = make_products_list(products)
    await callback.message.answer(
        f"–¢–æ–≤–∞—Ä–∏ –±—Ä–µ–Ω–¥—É {brand}:",
        reply_markup=kb
    )

    await callback.answer()


@user_router.callback_query(F.data == "menu_catalog")
async def on_menu_catalog(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    brands = get_all_brands()
    if not brands:
        await callback.message.answer(
            "–¢–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.",
            reply_markup=main_reply_keyboard(callback.from_user.id)
        )
        await callback.answer()
        return

    kb = make_brand_menu(brands)
    await callback.message.answer(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥:",
        reply_markup=kb
    )

    await callback.answer()


@user_router.callback_query(F.data.startswith("back_to_brand:"))
async def on_back_to_brand(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass

    brand = callback.data.split(":", 1)[1]
    products = list_products_by_brand(brand)

    if not products:
        await callback.message.answer(
            f"–ü–æ–∫–∏ —â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –±—Ä–µ–Ω–¥—É {brand} –Ω–µ–º–∞—î."
        )
        await callback.answer()
        return

    kb = make_products_list(products)
    await callback.message.answer(
        f"–¢–æ–≤–∞—Ä–∏ –±—Ä–µ–Ω–¥—É {brand}:",
        reply_markup=kb
    )

    await callback.answer()
