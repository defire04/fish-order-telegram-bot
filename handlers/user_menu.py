import random

import telebot
from telebot.types import Message, CallbackQuery

import handlers.cart as cart
from data.config import ADMIN_IDS
from keyboards.inline import make_main_menu, make_products_list, make_brand_menu
from keyboards.reply import main_reply_keyboard
from services.order_service import get_user_orders, get_items_for_order
from services.product_service import get_all_brands, list_products_by_brand
from services.user_service import ensure_user_exists

FRIENDLY_STICKER_ID = "üëã"


def register_user_menu(bot: telebot.TeleBot):
    greetings = [
        "–ü—Ä–∏–≤—ñ—Ç, {}! –†–∞–¥–∏–π —Ç–µ–±–µ –±–∞—á–∏—Ç–∏!",
        "–í—ñ—Ç–∞—é, {}! –°–ø–æ–¥—ñ–≤–∞—é—Å—è, —É —Ç–µ–±–µ –≤—Å–µ –¥–æ–±—Ä–µ!",
    ]

    @bot.message_handler(commands=['start'])
    def cmd_start(message: Message):
        user_fullname = (message.from_user.first_name or '') + ' ' + (message.from_user.last_name or '')
        user_fullname = user_fullname.strip()
        ensure_user_exists(message.from_user.id, user_fullname)

        try:
            bot.send_sticker(message.chat.id, FRIENDLY_STICKER_ID)
        except:
            pass

        greet = random.choice(greetings).format(user_fullname)
        text = greet + "\n–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥, –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ—à–∏–∫ —ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."

        bot.send_message(
            message.chat.id,
            text,
            reply_markup=main_reply_keyboard(message.from_user.id)
        )

    @bot.message_handler(func=lambda m: m.text in [
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        "–ö–∞—Ç–∞–ª–æ–≥",
        "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫",
        "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        "–ê–¥–º—ñ–Ω-–º–µ–Ω—é"
    ])
    def on_reply_menu(message: Message):
        if message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            bot.send_message(
                message.chat.id,
                "–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:",
                reply_markup=make_main_menu()
            )

        elif message.text == "–ö–∞—Ç–∞–ª–æ–≥":
            brands = get_all_brands()
            if not brands:
                bot.send_message(
                    message.chat.id,
                    "–ó–∞—Ä–∞–∑ —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ü–æ–≤–µ—Ä–Ω–∏—Å—å –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–∞–ø–∏—Ç–∞–π —â–æ—Å—å —ñ—â–µ!",
                    reply_markup=main_reply_keyboard(message.from_user.id)
                )
                return
            kb = telebot.types.InlineKeyboardMarkup()
            for b in brands:
                kb.add(telebot.types.InlineKeyboardButton(b, callback_data=f"brand:{b}"))
            kb.add(telebot.types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="go_main"))
            bot.send_message(
                message.chat.id,
                "–û—Å—å –Ω–∞—à—ñ –±—Ä–µ–Ω–¥–∏. –û–±–∏—Ä–∞–π, –±—É–¥—å –ª–∞—Å–∫–∞:",
                reply_markup=kb
            )

        elif message.text == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ—à–∏–∫":
            cart.show_cart(bot, message.from_user.id, message.chat.id)


        elif message.text == "–ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":


            orders = get_user_orders(message.from_user.id)

            if not orders:
                bot.send_message(
                    message.chat.id,
                    "–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å. –ú–æ–∂–µ, –∑–∞–∑–∏—Ä–Ω–µ–º–æ –≤ –∫–∞—Ç–∞–ª–æ–≥?",
                    reply_markup=main_reply_keyboard(message.from_user.id)
                )

            else:
                txt = "–û—Å—å —Ç–≤–æ—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
                for o in orders:
                    txt += f"‚Ññ{o['id']} | —Å—É–º–∞ {o['total_price']} –≥—Ä–Ω | {o['created_at']}\n"
                    items = get_items_for_order(o["id"])
                    if items:
                        txt += "–¢–æ–≤–∞—Ä–∏:\n"
                        for it in items:
                            subtotal = it["product_price"] * it["quantity"]
                            txt += f"  {it['product_name']} x {it['quantity']} = {subtotal} –≥—Ä–Ω\n"
                    txt += "--------------------------------\n"
                txt += "\n–Ø–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è, –ø–∏—à–∏ –Ω–∞–º!"

                bot.send_message(
                    message.chat.id,
                    txt,
                    reply_markup=main_reply_keyboard(message.from_user.id))

        elif message.text == "–ê–¥–º—ñ–Ω-–º–µ–Ω—é":
            if message.from_user.id in ADMIN_IDS:
                from handlers.admin_menu import show_admin_menu
                show_admin_menu(bot, message.chat.id)
            else:
                bot.send_message(message.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

    @bot.callback_query_handler(func=lambda call: call.data in ["menu_cart", "menu_order", "go_main"])
    def callback_main_menu(call: CallbackQuery):
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass

        if call.data == "menu_cart":
            cart.show_cart(bot, call.from_user.id, call.message.chat.id)

        elif call.data == "menu_order":
            cart.confirm_order(bot, call)

        elif call.data == "go_main":
            bot.send_message(
                call.message.chat.id,
                "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:",
                reply_markup=make_main_menu()
            )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("brand:"))
    def on_choose_brand(call: CallbackQuery):
        brand = call.data.split(":", 1)[1]
        products = list_products_by_brand(brand)
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        if not products:
            bot.send_message(
                call.message.chat.id,
                f"–ü–æ–∫–∏ —â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –±—Ä–µ–Ω–¥—É {brand} –Ω–µ–º–∞—î.",
                reply_markup=main_reply_keyboard(call.from_user.id)
            )
            return
        kb = make_products_list(products)
        bot.send_message(
            call.message.chat.id,
            f"–¢–æ–≤–∞—Ä–∏ –±—Ä–µ–Ω–¥—É {brand}:",
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data == "menu_catalog")
    def on_menu_catalog(call: CallbackQuery):
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
        b = get_all_brands()
        if not b:
            bot.send_message(
                call.message.chat.id,
                "–¢–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ.",
                reply_markup=main_reply_keyboard(call.from_user.id)
            )
            return
        kb = make_brand_menu(b)
        bot.send_message(
            call.message.chat.id,
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥:",
            reply_markup=kb
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_brand:"))
    def on_back_to_brand(call: CallbackQuery):
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass

        brand = call.data.split(":", 1)[1]
        products = list_products_by_brand(brand)
        if not products:
            bot.send_message(
                call.message.chat.id,
                f"–ü–æ–∫–∏ —â–æ —Ç–æ–≤–∞—Ä—ñ–≤ –±—Ä–µ–Ω–¥—É {brand} –Ω–µ–º–∞—î.",
            )
            return

        kb = make_products_list(products)
        bot.send_message(
            call.message.chat.id,
            f"–¢–æ–≤–∞—Ä–∏ –±—Ä–µ–Ω–¥—É {brand}:",
            reply_markup=kb
        )
